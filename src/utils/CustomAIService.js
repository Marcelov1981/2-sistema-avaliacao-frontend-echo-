/**
 * Servi√ßo de IA Personalizada para An√°lise de Imagens Imobili√°rias
 * Substitui o GeminiService com funcionalidades avan√ßadas de geolocaliza√ß√£o
 */

import ExifService from './ExifService.js';
import GeoLocationService from './GeoLocationService.js';
import PropertyScrapingService from './PropertyScrapingService.js';
import GoogleGenAIService from './GoogleGenAIService.js';

class CustomAIService {
  static API_ENDPOINTS = {
    // APIs de IA para an√°lise de imagens
    OPENAI_VISION: 'https://api.openai.com/v1/chat/completions',
    ANTHROPIC_CLAUDE: 'https://api.anthropic.com/v1/messages',
    AZURE_VISION: 'https://api.cognitive.microsoft.com/vision/v3.2/analyze',
    GOOGLE_VISION: 'https://vision.googleapis.com/v1/images:annotate'
  };

  static API_KEYS = {
    OPENAI: import.meta.env.VITE_OPENAI_API_KEY,
    ANTHROPIC: import.meta.env.VITE_ANTHROPIC_API_KEY,
    AZURE: import.meta.env.VITE_AZURE_VISION_KEY,
    GOOGLE: import.meta.env.VITE_GOOGLE_VISION_KEY
  };

  /**
   * An√°lise completa de imagem com geolocaliza√ß√£o
   * @param {File} imageFile - Arquivo de imagem
   * @param {string} customPrompt - Prompt personalizado
   * @param {Object} propertyInfo - Informa√ß√µes do im√≥vel
   * @returns {Promise<Object>} An√°lise completa
   */
  static async analyzeImageWithLocation(imageFile, customPrompt = '', propertyInfo = {}) {
    const startTime = Date.now();
    console.log('üîç Iniciando an√°lise completa da imagem...');
    console.log('üìä Par√¢metros de entrada:', {
      fileName: imageFile?.name,
      fileSize: imageFile?.size,
      fileType: imageFile?.type,
      propertyInfo: Object.keys(propertyInfo),
      hasCustomPrompt: !!customPrompt
    });
    
    try {
      // 1. Extrai metadados EXIF
      console.log('üì∏ Extraindo metadados EXIF...');
      const exifStartTime = Date.now();
      const metadata = await ExifService.extractMetadata(imageFile);
      console.log(`‚úÖ EXIF extra√≠do em ${Date.now() - exifStartTime}ms:`, {
        hasGPS: !!metadata?.location?.latitude,
        hasDateTime: !!metadata?.datetime,
        hasCameraInfo: !!(metadata?.camera || metadata?.technical)
      });
      
      // 2. An√°lise de geolocaliza√ß√£o
      let locationData = null;
      let marketAnalysis = null;
      let similarProperties = [];
      
      if (metadata?.location?.latitude && metadata?.location?.longitude) {
        console.log('üåç Processando geolocaliza√ß√£o...');
        const geoStartTime = Date.now();
        
        try {
          // Busca reversa de endere√ßo
          console.log('üìç Buscando endere√ßo reverso...');
          locationData = await GeoLocationService.reverseGeocode(
            metadata.location.latitude,
            metadata.location.longitude
          );
          console.log(`‚úÖ Endere√ßo encontrado em ${Date.now() - geoStartTime}ms:`, locationData?.formatted_address);
          
          // An√°lise de mercado na regi√£o
          console.log('üìä Analisando mercado imobili√°rio...');
          const marketStartTime = Date.now();
          marketAnalysis = await PropertyScrapingService.analyzeMarketTrends(
            {
              lat: metadata.location.latitude,
              lng: metadata.location.longitude
            },
            2000 // 2km de raio
          );
          console.log(`‚úÖ An√°lise de mercado conclu√≠da em ${Date.now() - marketStartTime}ms:`, {
            totalProperties: marketAnalysis?.totalProperties || 0,
            averagePrice: marketAnalysis?.priceAnalysis?.average
          });
          
          // Busca im√≥veis similares
          console.log('üè† Buscando im√≥veis similares...');
          const similarStartTime = Date.now();
          similarProperties = await PropertyScrapingService.searchSimilarProperties({
            coordinates: {
              lat: metadata.location.latitude,
              lng: metadata.location.longitude
            },
            propertyType: propertyInfo.tipo_imovel || 'apartamento',
            minPrice: propertyInfo.valor_estimado ? propertyInfo.valor_estimado * 0.7 : 100000,
            maxPrice: propertyInfo.valor_estimado ? propertyInfo.valor_estimado * 1.3 : 1000000,
            radius: 1500
          });
          console.log(`‚úÖ Busca de similares conclu√≠da em ${Date.now() - similarStartTime}ms:`, {
            found: similarProperties?.length || 0
          });
        } catch (geoError) {
          console.warn('‚ö†Ô∏è Erro na an√°lise de geolocaliza√ß√£o:', geoError.message);
        }
      } else {
        console.log('üìç Nenhum dado GPS encontrado na imagem');
      }
      
      // 3. An√°lise visual da imagem
      console.log('üëÅÔ∏è Iniciando an√°lise visual...');
      const visualStartTime = Date.now();
      const visualAnalysis = await this.performVisualAnalysis(imageFile, customPrompt);
      console.log(`‚úÖ An√°lise visual conclu√≠da em ${Date.now() - visualStartTime}ms:`, {
        provider: visualAnalysis?.provider,
        confidence: visualAnalysis?.confidence,
        hasAnalysis: !!visualAnalysis?.analysis,
        analysisLength: visualAnalysis?.analysis?.length || 0
      });
      
      // 4. An√°lise contextual integrada
      console.log('üîó Gerando an√°lise contextual integrada...');
      const contextStartTime = Date.now();
      const contextualAnalysis = await this.generateContextualAnalysis({
        metadata,
        locationData,
        marketAnalysis,
        similarProperties,
        visualAnalysis,
        propertyInfo,
        customPrompt
      });
      console.log(`‚úÖ An√°lise contextual conclu√≠da em ${Date.now() - contextStartTime}ms`);
      
      // 5. Gerar recomenda√ß√µes
      console.log('üí° Gerando recomenda√ß√µes...');
      const recStartTime = Date.now();
      const recommendations = this.generateRecommendations({
        locationData,
        marketAnalysis,
        similarProperties,
        propertyInfo
      });
      console.log(`‚úÖ Recomenda√ß√µes geradas em ${Date.now() - recStartTime}ms:`, {
        recommendationCount: recommendations?.length || 0
      });
      
      const totalTime = Date.now() - startTime;
      console.log(`üéâ An√°lise completa conclu√≠da em ${totalTime}ms`);
      
      const result = {
        success: true,
        timestamp: new Date().toISOString(),
        aiProvider: visualAnalysis?.provider || 'IA Personalizada GeoMind',
        confidence: visualAnalysis?.confidence || 0.85,
        analysisMethod: 'Multi-Provider AI',
        imageMetadata: metadata,
        locationData,
        marketAnalysis,
        similarProperties: similarProperties.slice(0, 10), // Limita a 10 resultados
        visualAnalysis,
        contextualAnalysis,
        recommendations,
        metadata: {
           processingTime: totalTime,
           timestamp: new Date().toISOString(),
           aiProvider: visualAnalysis?.provider || 'IA Personalizada GeoMind',
           confidence: visualAnalysis?.confidence || 0.85,
           analysisMethod: 'Multi-Provider AI'
         }
      };
      
      // Valida√ß√µes para garantir conte√∫do m√≠nimo
      if (!result.visualAnalysis || !result.visualAnalysis.analysis) {
        result.visualAnalysis = {
          provider: 'An√°lise Local',
          analysis: 'An√°lise b√°sica da imagem realizada. Para resultados mais detalhados, configure as chaves de API das IAs no arquivo .env',
          confidence: 0.3
        };
      }
      
      if (!result.contextualAnalysis) {
        result.contextualAnalysis = 'An√°lise contextual n√£o dispon√≠vel. Configure APIs de geolocaliza√ß√£o para an√°lise mais completa.';
      }
      
      if (!result.recommendations) {
        result.recommendations = 'Para recomenda√ß√µes personalizadas, configure as APIs de IA e geolocaliza√ß√£o.';
      }
      
      console.log('üìã Resultado final:', {
        success: result.success,
        hasVisualAnalysis: !!result.visualAnalysis,
        hasLocationData: !!result.locationData,
        hasMarketAnalysis: !!result.marketAnalysis,
        similarPropertiesCount: result.similarProperties?.length || 0,
        recommendationsCount: result.recommendations?.length || 0,
        processingTime: totalTime
      });
      
      return result;
    } catch (error) {
      const errorTime = Date.now() - startTime;
      console.error('‚ùå Erro cr√≠tico na an√°lise de imagem:', {
        message: error.message,
        stack: error.stack,
        processingTime: errorTime,
        fileName: imageFile?.name,
        fileSize: imageFile?.size
      });
      
      return {
        success: false,
        error: error.message,
        timestamp: new Date().toISOString(),
        metadata: {
          processingTime: errorTime,
          errorDetails: {
            name: error.name,
            message: error.message,
            fileName: imageFile?.name
          }
        }
      };
    }
  }

  /**
   * An√°lise visual usando APIs de IA
   * @param {File} imageFile - Arquivo de imagem
   * @param {string} customPrompt - Prompt personalizado
   * @returns {Promise<Object>} An√°lise visual
   */
  static async performVisualAnalysis(imageFile, customPrompt) {
    try {
      console.log('üîç Iniciando an√°lise visual da imagem...');
      console.log('üìä APIs dispon√≠veis:', {
        GoogleGenAI: !!import.meta.env.VITE_GEMINI_API_KEY,
        OpenAI: !!this.API_KEYS.OPENAI && this.API_KEYS.OPENAI !== 'your_openai_api_key_here',
        Anthropic: !!this.API_KEYS.ANTHROPIC && this.API_KEYS.ANTHROPIC !== 'your_anthropic_api_key_here',
        Google: !!this.API_KEYS.GOOGLE && this.API_KEYS.GOOGLE !== 'your_google_vision_api_key_here',
        Gemini: !!import.meta.env.VITE_GEMINI_API_KEY
      });
      
      // Converte imagem para base64
      const base64Image = await this.fileToBase64(imageFile);
      
      // Tenta diferentes APIs em ordem de prefer√™ncia
      let result = null;
      
      // Tenta Google GenAI primeiro (nova biblioteca)
      if (import.meta.env.VITE_GEMINI_API_KEY) {
        try {
          console.log('ü§ñ Tentando an√°lise com Google GenAI (nova biblioteca)...');
          result = await GoogleGenAIService.analyzeImage(imageFile, customPrompt);
          console.log('‚úÖ An√°lise Google GenAI conclu√≠da com sucesso');
        } catch (error) {
           console.warn('‚ùå Falha na an√°lise Google GenAI:', error.message);
         }
      }
      
      // Tenta OpenAI se Google GenAI falhou
      if (!result && this.API_KEYS.OPENAI && this.API_KEYS.OPENAI !== 'your_openai_api_key_here') {
        try {
          console.log('ü§ñ Tentando an√°lise com OpenAI...');
          result = await this.analyzeWithOpenAI(base64Image, customPrompt);
          console.log('‚úÖ An√°lise OpenAI conclu√≠da com sucesso');
        } catch (error) {
           console.warn('‚ùå Falha na an√°lise OpenAI:', error.message);
         }
      }
      
      // Tenta Anthropic se OpenAI falhou
      if (!result && this.API_KEYS.ANTHROPIC && this.API_KEYS.ANTHROPIC !== 'your_anthropic_api_key_here') {
        try {
          console.log('ü§ñ Tentando an√°lise com Anthropic Claude...');
          result = await this.analyzeWithClaude(base64Image, customPrompt);
          console.log('‚úÖ An√°lise Anthropic conclu√≠da com sucesso');
        } catch (error) {
           console.warn('‚ùå Falha na an√°lise Anthropic:', error.message);
         }
      }
      
      // Tenta Google Vision se anteriores falharam
      if (!result && this.API_KEYS.GOOGLE && this.API_KEYS.GOOGLE !== 'your_google_vision_api_key_here') {
        try {
          console.log('ü§ñ Tentando an√°lise com Google Vision...');
          result = await this.analyzeWithGoogleVision(base64Image, customPrompt);
          console.log('‚úÖ An√°lise Google Vision conclu√≠da com sucesso');
        } catch (error) {
           console.warn('‚ùå Falha na an√°lise Google Vision:', error.message);
         }
      }
      
      // Fallback para Gemini se dispon√≠vel
      if (!result && import.meta.env.VITE_GEMINI_API_KEY) {
        try {
          console.log('ü§ñ Usando fallback: Google Gemini...');
          result = await this.analyzeWithGemini(base64Image, customPrompt);
          console.log('‚úÖ An√°lise Gemini (fallback) conclu√≠da com sucesso');
        } catch (error) {
           console.warn('‚ùå Falha no fallback Gemini:', error.message);
         }
      }
      
      // √öltimo recurso: an√°lise local
      if (!result) {
        console.log('üîß Usando an√°lise local como √∫ltimo recurso...');
        result = await this.performLocalAnalysis(imageFile, customPrompt);
      }
      
      return result;
    } catch (error) {
      console.error('üí• Erro cr√≠tico na an√°lise visual:', error);
      return {
        provider: 'fallback-error',
        analysis: `Erro na an√°lise: ${error.message}. Verifique se as chaves de API est√£o configuradas corretamente no arquivo .env`,
        confidence: 0.1,
        error: error.message
      };
    }
  }

  /**
   * An√°lise usando Google Gemini (Fallback)
   */
  static async analyzeWithGemini(base64Image) {
    try {
      const prompt = this.buildAnalysisPrompt();
      
      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${import.meta.env.VITE_GEMINI_API_KEY}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          contents: [{
            parts: [
              { text: prompt },
              {
                inline_data: {
                  mime_type: 'image/jpeg',
                  data: base64Image
                }
              }
            ]
          }]
        })
      });
      
      const data = await response.json();
      
      if (data.candidates && data.candidates[0]) {
        return {
          provider: 'Google Gemini (Fallback)',
          analysis: data.candidates[0].content.parts[0].text,
          confidence: 0.8
        };
      } else {
        throw new Error('Resposta inv√°lida do Gemini');
      }
    } catch (error) {
      console.error('Erro Gemini:', error);
      throw error;
    }
  }

  /**
   * An√°lise usando OpenAI GPT-4 Vision
   */
  static async analyzeWithOpenAI(base64Image, customPrompt) {
    try {
      const prompt = this.buildAnalysisPrompt(customPrompt);
      
      const response = await fetch(this.API_ENDPOINTS.OPENAI_VISION, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.API_KEYS.OPENAI}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          model: 'gpt-4-vision-preview',
          messages: [
            {
              role: 'user',
              content: [
                {
                  type: 'text',
                  text: prompt
                },
                {
                  type: 'image_url',
                  image_url: {
                    url: `data:image/jpeg;base64,${base64Image}`
                  }
                }
              ]
            }
          ],
          max_tokens: 1000
        })
      });
      
      const data = await response.json();
      
      return {
        provider: 'OpenAI GPT-4 Vision',
        analysis: data.choices[0].message.content,
        confidence: 0.9,
        usage: data.usage
      };
    } catch (error) {
      console.error('Erro OpenAI:', error);
      throw error;
    }
  }

  /**
   * An√°lise usando Anthropic Claude
   */
  static async analyzeWithClaude(base64Image, customPrompt) {
    try {
      const prompt = this.buildAnalysisPrompt(customPrompt);
      
      const response = await fetch(this.API_ENDPOINTS.ANTHROPIC_CLAUDE, {
        method: 'POST',
        headers: {
          'x-api-key': this.API_KEYS.ANTHROPIC,
          'Content-Type': 'application/json',
          'anthropic-version': '2023-06-01'
        },
        body: JSON.stringify({
          model: 'claude-3-opus-20240229',
          max_tokens: 1000,
          messages: [
            {
              role: 'user',
              content: [
                {
                  type: 'image',
                  source: {
                    type: 'base64',
                    media_type: 'image/jpeg',
                    data: base64Image
                  }
                },
                {
                  type: 'text',
                  text: prompt
                }
              ]
            }
          ]
        })
      });
      
      const data = await response.json();
      
      return {
        provider: 'Anthropic Claude',
        analysis: data.content[0].text,
        confidence: 0.85,
        usage: data.usage
      };
    } catch (error) {
      console.error('Erro Claude:', error);
      throw error;
    }
  }

  /**
   * An√°lise usando Google Vision API com recursos avan√ßados
   */
  static async analyzeWithGoogleVision(base64Image) {
    try {
      const response = await fetch(
        `${this.API_ENDPOINTS.GOOGLE_VISION}?key=${this.API_KEYS.GOOGLE}`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            requests: [
              {
                image: {
                  content: base64Image
                },
                features: [
                  { type: 'LABEL_DETECTION', maxResults: 50 },
                  { type: 'OBJECT_LOCALIZATION', maxResults: 30 },
                  { type: 'TEXT_DETECTION' },
                  { type: 'LANDMARK_DETECTION' },
                  { type: 'SAFE_SEARCH_DETECTION' },
                  { type: 'IMAGE_PROPERTIES' },
                  { type: 'CROP_HINTS', maxResults: 5 },
                  { type: 'WEB_DETECTION', maxResults: 10 }
                ],
                imageContext: {
                  cropHintsParams: {
                    aspectRatios: [0.8, 1.0, 1.2]
                  },
                  webDetectionParams: {
                    includeGeoResults: true
                  }
                }
              }
            ]
          })
        }
      );
      
      const data = await response.json();
      const annotations = data.responses[0];
      
      // Processa resultados do Google Vision
      const analysis = this.processGoogleVisionResults(annotations);
      
      return {
        provider: 'Google Vision API',
        analysis,
        confidence: 0.8,
        rawData: annotations
      };
    } catch (error) {
      console.error('Erro Google Vision:', error);
      throw error;
    }
  }

  /**
   * An√°lise local b√°sica (fallback)
   */
  static async performLocalAnalysis(imageFile, customPrompt = '') {
    console.log('üîß Executando an√°lise local avan√ßada...');
    
    const fileName = imageFile.name.toLowerCase();
    const fileSize = imageFile.size;
    const fileType = imageFile.type;
    
    let analysis = 'üìä AN√ÅLISE INTELIGENTE LOCAL\n\n';
    
    // An√°lise do arquivo
    analysis += 'üîç INFORMA√á√ïES DO ARQUIVO:\n';
    analysis += `‚Ä¢ Nome: ${imageFile.name}\n`;
    analysis += `‚Ä¢ Tamanho: ${(fileSize / 1024 / 1024).toFixed(2)} MB\n`;
    analysis += `‚Ä¢ Tipo: ${fileType}\n\n`;
    
    // Infer√™ncias baseadas no nome do arquivo
    analysis += 'üè† IDENTIFICA√á√ÉO DO AMBIENTE:\n';
    let environmentDetected = false;
    
    if (fileName.includes('fachada') || fileName.includes('frente') || fileName.includes('exterior')) {
      analysis += '‚Ä¢ üè¢ FACHADA/EXTERIOR: Imagem da parte externa do im√≥vel\n';
      analysis += '  - Permite avaliar arquitetura, conserva√ß√£o e localiza√ß√£o\n';
      analysis += '  - Importante para primeira impress√£o e valor de mercado\n';
      environmentDetected = true;
    }
    
    if (fileName.includes('sala') || fileName.includes('living') || fileName.includes('social')) {
      analysis += '‚Ä¢ üõãÔ∏è √ÅREA SOCIAL: Ambiente de conviv√™ncia\n';
      analysis += '  - Espa√ßo para receber visitas e relaxar\n';
      analysis += '  - Influencia diretamente no valor do im√≥vel\n';
      environmentDetected = true;
    }
    
    if (fileName.includes('quarto') || fileName.includes('bedroom') || fileName.includes('dormitorio')) {
      analysis += '‚Ä¢ üõèÔ∏è DORMIT√ìRIO: √Årea de descanso\n';
      analysis += '  - Privacidade e conforto s√£o essenciais\n';
      analysis += '  - Quantidade e tamanho afetam o valor\n';
      environmentDetected = true;
    }
    
    if (fileName.includes('cozinha') || fileName.includes('kitchen')) {
      analysis += '‚Ä¢ üç≥ COZINHA: Centro gastron√¥mico da casa\n';
      analysis += '  - Funcionalidade e modernidade s√£o valorizadas\n';
      analysis += '  - Integra√ß√£o com √°rea social √© tend√™ncia\n';
      environmentDetected = true;
    }
    
    if (fileName.includes('banheiro') || fileName.includes('bathroom') || fileName.includes('lavabo')) {
      analysis += '‚Ä¢ üöø BANHEIRO: √Årea de higiene pessoal\n';
      analysis += '  - Acabamentos e funcionalidade s√£o importantes\n';
      analysis += '  - Quantidade adequada valoriza o im√≥vel\n';
      environmentDetected = true;
    }
    
    if (fileName.includes('garagem') || fileName.includes('garage') || fileName.includes('estacionamento')) {
      analysis += '‚Ä¢ üöó GARAGEM: √Årea de estacionamento\n';
      analysis += '  - Seguran√ßa para ve√≠culos\n';
      analysis += '  - Valoriza√ß√£o significativa em centros urbanos\n';
      environmentDetected = true;
    }
    
    if (!environmentDetected) {
      analysis += '‚Ä¢ üì∑ AMBIENTE N√ÉO IDENTIFICADO: An√°lise geral\n';
      analysis += '  - Recomenda-se renomear arquivo para melhor identifica√ß√£o\n';
    }
    
    analysis += '\n';
    
    // An√°lise da qualidade da imagem
    analysis += 'üì∏ QUALIDADE DA IMAGEM:\n';
    if (fileSize > 5 * 1024 * 1024) {
      analysis += '‚Ä¢ ‚úÖ ALTA RESOLU√á√ÉO: Excelente qualidade para an√°lise\n';
      analysis += '  - Permite identificar detalhes importantes\n';
      analysis += '  - Ideal para documenta√ß√£o profissional\n';
    } else if (fileSize > 2 * 1024 * 1024) {
      analysis += '‚Ä¢ ‚úÖ BOA RESOLU√á√ÉO: Qualidade adequada\n';
      analysis += '  - Suficiente para an√°lise geral\n';
      analysis += '  - Recomendada para uso comercial\n';
    } else if (fileSize > 500 * 1024) {
      analysis += '‚Ä¢ ‚ö†Ô∏è RESOLU√á√ÉO M√âDIA: Qualidade aceit√°vel\n';
      analysis += '  - Pode limitar an√°lise de detalhes\n';
      analysis += '  - Considere usar imagens de maior qualidade\n';
    } else {
      analysis += '‚Ä¢ ‚ùå BAIXA RESOLU√á√ÉO: Qualidade limitada\n';
      analysis += '  - Dificulta an√°lise detalhada\n';
      analysis += '  - Recomenda-se capturar nova imagem\n';
    }
    
    analysis += '\n';
    
    // Recomenda√ß√µes gerais
    analysis += 'üí° RECOMENDA√á√ïES PARA AN√ÅLISE COMPLETA:\n';
    analysis += '‚Ä¢ Configure uma API de IA (OpenAI, Anthropic, Google Vision)\n';
    analysis += '‚Ä¢ Use imagens com boa ilumina√ß√£o e resolu√ß√£o\n';
    analysis += '‚Ä¢ Capture m√∫ltiplos √¢ngulos do mesmo ambiente\n';
    analysis += '‚Ä¢ Inclua imagens da fachada e √°reas externas\n';
    analysis += '‚Ä¢ Documente acabamentos e detalhes construtivos\n\n';
    
    // Prompt personalizado
    if (customPrompt) {
      analysis += 'üéØ AN√ÅLISE PERSONALIZADA SOLICITADA:\n';
      analysis += `"${customPrompt}"\n\n`;
      analysis += 'üìù RESPOSTA BASEADA EM AN√ÅLISE LOCAL:\n';
      analysis += 'Para atender completamente sua solicita√ß√£o, seria necess√°rio ';
      analysis += 'processamento visual avan√ßado com IA. A an√°lise local fornece ';
      analysis += 'informa√ß√µes b√°sicas baseadas no nome e propriedades do arquivo.\n\n';
    }
    
    analysis += '‚ö†Ô∏è LIMITA√á√ïES DA AN√ÅLISE LOCAL:\n';
    analysis += '‚Ä¢ N√£o processa conte√∫do visual da imagem\n';
    analysis += '‚Ä¢ Baseada apenas em metadados do arquivo\n';
    analysis += '‚Ä¢ Para an√°lise visual completa, configure APIs de IA\n';
    analysis += '‚Ä¢ Resultados limitados comparados √† an√°lise com IA\n\n';
    
    analysis += 'üîß STATUS DO SISTEMA:\n';
    analysis += '‚Ä¢ APIs externas: Indispon√≠veis ou n√£o configuradas\n';
    analysis += '‚Ä¢ Modo de opera√ß√£o: An√°lise local (fallback)\n';
    analysis += '‚Ä¢ Confiabilidade: Limitada (30%)\n';
    
    return {
      provider: 'An√°lise Local Avan√ßada (Fallback)',
      analysis,
      confidence: 0.3,
      limitations: [
        'N√£o processa conte√∫do visual',
        'Baseada em metadados do arquivo',
        'Requer configura√ß√£o de API para an√°lise completa'
      ],
      recommendations: [
        'Configure API do OpenAI, Anthropic ou Google Vision',
        'Use imagens de alta qualidade',
        'Nomeie arquivos de forma descritiva',
        'Capture m√∫ltiplos √¢ngulos'
      ]
    };
  }

  /**
   * Gera an√°lise contextual integrada
   */
  static async generateContextualAnalysis(data) {
    const {
      metadata,
      locationData,
      marketAnalysis,
      similarProperties,
      visualAnalysis,
      propertyInfo
    } = data;
    
    let analysis = '## AN√ÅLISE CONTEXTUAL INTEGRADA\n\n';
    
    // An√°lise de localiza√ß√£o detalhada
    if (locationData) {
      analysis += `### üìç AN√ÅLISE GEOGR√ÅFICA DETALHADA\n`;
      analysis += `**Endere√ßo completo:** ${locationData.formatted_address}\n`;
      analysis += `**Bairro:** ${locationData.neighborhood || 'N/A'}\n`;
      analysis += `**Cidade:** ${locationData.city || 'N/A'}\n`;
      analysis += `**Estado:** ${locationData.state || 'N/A'}\n`;
      analysis += `**CEP:** ${locationData.postal_code || 'N/A'}\n`;
      analysis += `**Coordenadas:** ${metadata?.location?.coordinates || 'N/A'}\n`;
      analysis += `**Precis√£o GPS:** ${locationData.accuracy}\n`;
      
      // An√°lise de contexto urbano
      if (locationData.place_types) {
        analysis += `**Tipo de √°rea:** ${locationData.place_types.join(', ')}\n`;
      }
      
      // An√°lise de proximidade
      if (locationData.nearby_places) {
        analysis += `**Pontos de interesse pr√≥ximos:**\n`;
        locationData.nearby_places.slice(0, 5).forEach(place => {
          analysis += `  - ${place.name} (${place.distance}m)\n`;
        });
      }
      analysis += '\n';
    }
    
    // An√°lise temporal e condi√ß√µes de captura
    if (metadata?.datetime?.dateTimeOriginal) {
      const photoDate = new Date(metadata.datetime.dateTimeOriginal);
      const daysSince = Math.floor((Date.now() - photoDate.getTime()) / (1000 * 60 * 60 * 24));
      const hour = photoDate.getHours();
      const timeOfDay = hour < 6 ? 'Madrugada' : hour < 12 ? 'Manh√£' : hour < 18 ? 'Tarde' : 'Noite';
      
      analysis += `### üìÖ AN√ÅLISE TEMPORAL E CONDI√á√ïES\n`;
      analysis += `**Data da captura:** ${photoDate.toLocaleDateString('pt-BR')} √†s ${photoDate.toLocaleTimeString('pt-BR')}\n`;
      analysis += `**Per√≠odo do dia:** ${timeOfDay}\n`;
      analysis += `**Idade da imagem:** ${daysSince} dias\n`;
      
      // An√°lise das condi√ß√µes t√©cnicas
      if (metadata.camera) {
        analysis += `**Equipamento:** ${metadata.camera.make} ${metadata.camera.model}\n`;
        if (metadata.camera.lens?.model) {
          analysis += `**Lente:** ${metadata.camera.lens.model}\n`;
        }
      }
      
      if (metadata.technical) {
        analysis += `**Configura√ß√µes:** ISO ${metadata.technical.iso}, f/${metadata.technical.aperture}, ${metadata.technical.shutterSpeed}s\n`;
      }
      analysis += '\n';
    }
    
    // An√°lise de mercado imobili√°rio
    if (marketAnalysis) {
      analysis += `### üìä AN√ÅLISE DE MERCADO IMOBILI√ÅRIO\n`;
      analysis += `**Im√≥veis analisados na regi√£o:** ${marketAnalysis.totalProperties}\n`;
      analysis += `**Pre√ßo m√©dio:** R$ ${marketAnalysis.priceAnalysis.average.toLocaleString('pt-BR')}\n`;
      analysis += `**Faixa de pre√ßos:** R$ ${marketAnalysis.priceAnalysis.min.toLocaleString('pt-BR')} - R$ ${marketAnalysis.priceAnalysis.max.toLocaleString('pt-BR')}\n`;
      analysis += `**Pre√ßo/m¬≤ m√©dio:** R$ ${marketAnalysis.pricePerSqmAnalysis.average.toLocaleString('pt-BR')}\n`;
      analysis += `**√Årea m√©dia:** ${marketAnalysis.areaAnalysis.average}m¬≤\n`;
      
      // An√°lise de tend√™ncias
      if (marketAnalysis.trends) {
        analysis += `**Tend√™ncia de pre√ßos:** ${marketAnalysis.trends.direction} (${marketAnalysis.trends.percentage}%)\n`;
      }
      analysis += '\n';
    }
    
    // An√°lise visual detalhada
    if (visualAnalysis) {
      analysis += `### üëÅÔ∏è AN√ÅLISE VISUAL DETALHADA\n`;
      analysis += `**Provedor de IA:** ${visualAnalysis.provider}\n`;
      analysis += `**N√≠vel de confian√ßa:** ${(visualAnalysis.confidence * 100).toFixed(1)}%\n`;
      analysis += `**An√°lise:**\n${visualAnalysis.analysis}\n\n`;
      
      // An√°lise de elementos visuais espec√≠ficos
      if (visualAnalysis.elements) {
        analysis += `**Elementos identificados:**\n`;
        Object.entries(visualAnalysis.elements).forEach(([category, items]) => {
          if (items.length > 0) {
            analysis += `  - ${category}: ${items.join(', ')}\n`;
          }
        });
        analysis += '\n';
      }
    }
    
    // Compara√ß√£o detalhada com similares
    if (similarProperties.length > 0) {
      analysis += `### üè† AN√ÅLISE COMPARATIVA DE MERCADO\n`;
      analysis += `**Im√≥veis similares encontrados:** ${similarProperties.length}\n`;
      
      const avgPrice = similarProperties.reduce((sum, p) => sum + p.price, 0) / similarProperties.length;
      const avgArea = similarProperties.reduce((sum, p) => sum + p.area, 0) / similarProperties.length;
      const avgPricePerSqm = avgPrice / avgArea;
      
      analysis += `**Pre√ßo m√©dio dos similares:** R$ ${avgPrice.toLocaleString('pt-BR')}\n`;
      analysis += `**√Årea m√©dia dos similares:** ${avgArea.toFixed(0)}m¬≤\n`;
      analysis += `**Pre√ßo/m¬≤ m√©dio dos similares:** R$ ${avgPricePerSqm.toLocaleString('pt-BR')}\n`;
      
      // An√°lise de posicionamento
      if (propertyInfo?.valor_estimado) {
        const priceComparison = ((propertyInfo.valor_estimado - avgPrice) / avgPrice * 100).toFixed(1);
        const comparisonText = priceComparison > 0 ? 'acima' : 'abaixo';
        analysis += `**Posicionamento de pre√ßo:** ${Math.abs(priceComparison)}% ${comparisonText} da m√©dia\n`;
      }
      
      // Top 3 similares mais relevantes
      analysis += `**Similares mais relevantes:**\n`;
      similarProperties.slice(0, 3).forEach((prop, index) => {
        analysis += `  ${index + 1}. ${prop.title} - R$ ${prop.price.toLocaleString('pt-BR')} (${prop.area}m¬≤)\n`;
      });
      analysis += '\n';
    }
    
    // An√°lise arquitet√¥nica e construtiva
    analysis += `### üèóÔ∏è AN√ÅLISE ARQUITET√îNICA\n`;
    if (visualAnalysis?.analysis) {
      // Extrai informa√ß√µes arquitet√¥nicas da an√°lise visual
      const architecturalKeywords = ['estilo', 'arquitetura', 'constru√ß√£o', 'material', 'acabamento', 'design'];
      const architecturalInfo = visualAnalysis.analysis.split('.').filter(sentence => 
        architecturalKeywords.some(keyword => sentence.toLowerCase().includes(keyword))
      );
      
      if (architecturalInfo.length > 0) {
        analysis += architecturalInfo.join('.') + '\n';
      } else {
        analysis += 'An√°lise arquitet√¥nica baseada nos elementos visuais identificados.\n';
      }
    }
    
    // An√°lise de valoriza√ß√£o
    if (metadata?.location && marketAnalysis) {
      analysis += `### üí∞ POTENCIAL DE VALORIZA√á√ÉO\n`;
      analysis += `**Localiza√ß√£o estrat√©gica:** An√°lise baseada em coordenadas GPS precisas\n`;
      analysis += `**Contexto de mercado:** ${marketAnalysis.totalProperties} im√≥veis compar√°veis na regi√£o\n`;
      
      if (locationData?.nearby_places) {
        const commercialPlaces = locationData.nearby_places.filter(p => 
          p.types?.includes('shopping_mall') || p.types?.includes('school') || p.types?.includes('hospital')
        );
        if (commercialPlaces.length > 0) {
          analysis += `**Infraestrutura pr√≥xima:** ${commercialPlaces.length} pontos de interesse relevantes\n`;
        }
      }
    }
    
    return analysis;
  }

  /**
   * Gera recomenda√ß√µes baseadas na an√°lise
   */
  static generateRecommendations(data) {
    const { locationData, marketAnalysis, similarProperties, propertyInfo } = data;
    const recommendations = [];
    
    // Recomenda√ß√µes de pre√ßo
    if (marketAnalysis && propertyInfo.valor_estimado) {
      const marketAvg = marketAnalysis.priceAnalysis.average;
      const estimatedValue = propertyInfo.valor_estimado;
      
      if (estimatedValue > marketAvg * 1.2) {
        recommendations.push({
          type: 'pricing',
          priority: 'high',
          title: 'Pre√ßo acima do mercado',
          description: `O valor estimado est√° ${((estimatedValue / marketAvg - 1) * 100).toFixed(1)}% acima da m√©dia local.`,
          suggestion: 'Considere revisar a precifica√ß√£o ou destacar diferenciais √∫nicos.'
        });
      } else if (estimatedValue < marketAvg * 0.8) {
        recommendations.push({
          type: 'pricing',
          priority: 'medium',
          title: 'Oportunidade de valoriza√ß√£o',
          description: `O valor est√° ${((1 - estimatedValue / marketAvg) * 100).toFixed(1)}% abaixo da m√©dia local.`,
          suggestion: 'H√° potencial para aumento de pre√ßo ou √© uma boa oportunidade de compra.'
        });
      }
    }
    
    // Recomenda√ß√µes de localiza√ß√£o
    if (locationData) {
      if (locationData.confidence > 0.8) {
        recommendations.push({
          type: 'location',
          priority: 'low',
          title: 'Localiza√ß√£o bem definida',
          description: 'A localiza√ß√£o foi identificada com alta precis√£o.',
          suggestion: 'Use a localiza√ß√£o como ponto forte na comercializa√ß√£o.'
        });
      }
    }
    
    // Recomenda√ß√µes de mercado
    if (similarProperties.length > 0) {
      const highScoreProperties = similarProperties.filter(p => p.relevanceScore > 70);
      
      if (highScoreProperties.length > 5) {
        recommendations.push({
          type: 'market',
          priority: 'medium',
          title: 'Mercado competitivo',
          description: `Encontrados ${highScoreProperties.length} im√≥veis muito similares na regi√£o.`,
          suggestion: 'Destaque diferenciais √∫nicos para se destacar da concorr√™ncia.'
        });
      }
    }
    
    return recommendations;
  }

  /**
   * Constr√≥i prompt para an√°lise de IA
   */
  static buildAnalysisPrompt(customPrompt) {
    const basePrompt = `
Fa√ßa uma an√°lise EXTREMAMENTE DETALHADA e MINUCIOSA desta imagem de im√≥vel, incluindo TODOS os aspectos visuais observ√°veis:

## üè† IDENTIFICA√á√ÉO DO AMBIENTE
- **Tipo espec√≠fico de c√¥modo** (sala de estar, sala de jantar, quarto principal, su√≠te, cozinha americana, √°rea gourmet, etc.)
- **Fun√ß√£o do espa√ßo** e layout observado
- **Integra√ß√£o com outros ambientes** (conceito aberto, separado, etc.)

## üé® AN√ÅLISE VISUAL DETALHADA
### Cores e Paleta:
- **Cores predominantes** nas paredes, m√≥veis e decora√ß√£o
- **Esquema crom√°tico** (monocrom√°tico, complementar, an√°logo)
- **Temperatura das cores** (quente, fria, neutra)

### Materiais e Texturas:
- **Revestimentos de piso** (porcelanato, madeira, laminado, carpete, etc.)
- **Revestimentos de parede** (tinta, papel de parede, textura, pedra, etc.)
- **Materiais dos m√≥veis** (madeira, MDF, metal, vidro, etc.)
- **Texturas observadas** (lisa, rugosa, brilhante, fosca)

### Ilumina√ß√£o:
- **Ilumina√ß√£o natural** (janelas, orienta√ß√£o solar aparente, qualidade da luz)
- **Ilumina√ß√£o artificial** (spots, lustres, arandelas, LED, etc.)
- **Distribui√ß√£o da luz** no ambiente
- **Sombras e contrastes** observados

## ü™ë MOBILI√ÅRIO E DECORA√á√ÉO
### M√≥veis Identificados:
- **Lista detalhada** de todos os m√≥veis vis√≠veis
- **Estilo dos m√≥veis** (moderno, cl√°ssico, r√∫stico, industrial, etc.)
- **Estado de conserva√ß√£o** de cada pe√ßa
- **Qualidade aparente** (b√°sica, m√©dia, alta, luxo)

### Elementos Decorativos:
- **Objetos decorativos** (quadros, plantas, almofadas, etc.)
- **Estilo decorativo** (minimalista, maximalista, ecl√©tico, etc.)
- **Harmonia do conjunto** decorativo

## üèóÔ∏è ASPECTOS CONSTRUTIVOS E ARQUITET√îNICOS
### Estrutura:
- **P√©-direito** (baixo, m√©dio, alto, duplo)
- **Formato do ambiente** (quadrado, retangular, irregular)
- **Elementos estruturais** vis√≠veis (vigas, pilares, etc.)

### Aberturas:
- **Janelas** (tipo, tamanho, orienta√ß√£o aparente)
- **Portas** (tipo, material, estado)
- **Ventila√ß√£o** aparente

### Acabamentos:
- **Qualidade dos acabamentos** (b√°sico, m√©dio, alto padr√£o, luxo)
- **Detalhes construtivos** (sancas, molduras, rodap√©s)
- **Estado de conserva√ß√£o** geral

## üåç CONTEXTO E LOCALIZA√á√ÉO
### Indicadores de Localiza√ß√£o:
- **Vista externa** (se vis√≠vel atrav√©s de janelas)
- **Paisagem urbana ou natural** observada
- **Indicadores de bairro** (pr√©dios, casas, vegeta√ß√£o)
- **Padr√£o construtivo** da regi√£o (se identific√°vel)

### Caracter√≠sticas Clim√°ticas:
- **Adapta√ß√µes clim√°ticas** observadas
- **Prote√ß√£o solar** (persianas, cortinas, toldos)
- **Ventila√ß√£o** e circula√ß√£o de ar

## üí∞ AN√ÅLISE DE VALOR IMOBILI√ÅRIO
### Aspectos Valorizadores:
- **Caracter√≠sticas premium** identificadas
- **Diferenciais competitivos**
- **Elementos de valoriza√ß√£o**

### Aspectos Desvalorizadores:
- **Problemas identificados** (desgaste, danos, obsolesc√™ncia)
- **Necessidades de manuten√ß√£o**
- **Limita√ß√µes do espa√ßo**

### Classifica√ß√£o de Padr√£o:
- **Padr√£o estimado** (popular, m√©dio, m√©dio-alto, alto, luxo)
- **Justificativa** da classifica√ß√£o
- **Compara√ß√£o** com padr√µes de mercado

## üìè DIMENS√ïES E PROPOR√á√ïES
- **Estimativa de metragem** do ambiente
- **Propor√ß√µes** e ergonomia do espa√ßo
- **Aproveitamento** do espa√ßo dispon√≠vel
- **Circula√ß√£o** e fluxo no ambiente

## üîç DETALHES ESPEC√çFICOS
### Equipamentos e Instala√ß√µes:
- **Eletrodom√©sticos** vis√≠veis (marca, modelo, estado)
- **Instala√ß√µes el√©tricas** aparentes
- **Instala√ß√µes hidr√°ulicas** vis√≠veis
- **Sistemas de climatiza√ß√£o**

### Seguran√ßa e Acessibilidade:
- **Elementos de seguran√ßa** observados
- **Acessibilidade** do ambiente
- **Ergonomia** dos espa√ßos

## üìä AN√ÅLISE T√âCNICA FINAL
- **Resumo executivo** da an√°lise
- **Pontos fortes** do im√≥vel
- **Pontos de aten√ß√£o** identificados
- **Recomenda√ß√µes** para valoriza√ß√£o
- **Adequa√ß√£o** para diferentes perfis de usu√°rio

Seja EXTREMAMENTE DETALHADO, observando cada elemento vis√≠vel na imagem. Descreva cores espec√≠ficas, materiais exatos, marcas quando identific√°veis, e todos os objetos presentes. Esta an√°lise ser√° usada para avalia√ß√£o imobili√°ria profissional.
`;
    
    return customPrompt ? `${customPrompt}\n\n${basePrompt}` : basePrompt;
  }

  /**
   * Processa resultados do Google Vision com an√°lise detalhada
   */
  static processGoogleVisionResults(annotations) {
    let analysis = '# AN√ÅLISE DETALHADA - GOOGLE VISION API\n\n';
    
    // An√°lise de elementos e objetos
    if (annotations.labelAnnotations) {
      analysis += '## üè∑Ô∏è ELEMENTOS E CARACTER√çSTICAS IDENTIFICADAS\n\n';
      
      // Categoriza os elementos
      const categories = {
        mobiliario: ['furniture', 'chair', 'table', 'sofa', 'bed', 'desk', 'cabinet', 'shelf'],
        decoracao: ['picture frame', 'plant', 'vase', 'lamp', 'curtain', 'pillow', 'artwork'],
        arquitetura: ['wall', 'ceiling', 'floor', 'window', 'door', 'room', 'building'],
        iluminacao: ['light', 'lighting', 'lamp', 'chandelier', 'natural light'],
        materiais: ['wood', 'metal', 'glass', 'fabric', 'stone', 'ceramic', 'plastic'],
        cores: ['white', 'black', 'brown', 'blue', 'red', 'green', 'yellow', 'gray']
      };
      
      const categorizedElements = {
        mobiliario: [],
        decoracao: [],
        arquitetura: [],
        iluminacao: [],
        materiais: [],
        cores: [],
        outros: []
      };
      
      annotations.labelAnnotations.forEach(label => {
        const desc = label.description.toLowerCase();
        let categorized = false;
        
        for (const [category, keywords] of Object.entries(categories)) {
          if (keywords.some(keyword => desc.includes(keyword))) {
            categorizedElements[category].push({
              name: label.description,
              confidence: (label.score * 100).toFixed(1)
            });
            categorized = true;
            break;
          }
        }
        
        if (!categorized) {
          categorizedElements.outros.push({
            name: label.description,
            confidence: (label.score * 100).toFixed(1)
          });
        }
      });
      
      // Exibe elementos categorizados
      Object.entries(categorizedElements).forEach(([category, elements]) => {
        if (elements.length > 0) {
          const categoryNames = {
            mobiliario: 'ü™ë **Mobili√°rio**',
            decoracao: 'üé® **Decora√ß√£o**',
            arquitetura: 'üèóÔ∏è **Elementos Arquitet√¥nicos**',
            iluminacao: 'üí° **Ilumina√ß√£o**',
            materiais: 'üß± **Materiais**',
            cores: 'üåà **Cores**',
            outros: 'üìã **Outros Elementos**'
          };
          
          analysis += `### ${categoryNames[category]}\n`;
          elements.slice(0, 8).forEach(element => {
            analysis += `‚Ä¢ ${element.name} (${element.confidence}% confian√ßa)\n`;
          });
          analysis += '\n';
        }
      });
    }
    
    // Objetos localizados com posicionamento
    if (annotations.localizedObjectAnnotations) {
      analysis += '## üìç OBJETOS DETECTADOS COM LOCALIZA√á√ÉO\n\n';
      annotations.localizedObjectAnnotations.forEach(obj => {
        const vertices = obj.boundingPoly.normalizedVertices;
        const x = ((vertices[0].x + vertices[2].x) / 2 * 100).toFixed(0);
        const y = ((vertices[0].y + vertices[2].y) / 2 * 100).toFixed(0);
        analysis += `‚Ä¢ **${obj.name}** (${(obj.score * 100).toFixed(1)}% confian√ßa)\n`;
        analysis += `  - Posi√ß√£o: ${x}% horizontal, ${y}% vertical na imagem\n`;
      });
      analysis += '\n';
    }
    
    // An√°lise de cores dominantes
    if (annotations.imagePropertiesAnnotation && annotations.imagePropertiesAnnotation.dominantColors) {
      analysis += '## üé® PALETA DE CORES DOMINANTES\n\n';
      const colors = annotations.imagePropertiesAnnotation.dominantColors.colors;
      colors.slice(0, 5).forEach((color, index) => {
        const rgb = color.color;
        const percentage = (color.pixelFraction * 100).toFixed(1);
        analysis += `‚Ä¢ **Cor ${index + 1}**: RGB(${rgb.red || 0}, ${rgb.green || 0}, ${rgb.blue || 0}) - ${percentage}% da imagem\n`;
      });
      analysis += '\n';
    }
    
    // Texto detectado com an√°lise
    if (annotations.textAnnotations && annotations.textAnnotations.length > 0) {
      analysis += '## üìù TEXTO E INFORMA√á√ïES IDENTIFICADAS\n\n';
      const fullText = annotations.textAnnotations[0].description;
      analysis += `**Texto completo detectado:**\n${fullText}\n\n`;
      
      // Analisa se h√° informa√ß√µes relevantes
      const relevantInfo = [];
      if (fullText.match(/\d{4,}/)) relevantInfo.push('N√∫meros identificados (poss√≠vel endere√ßo, telefone ou c√≥digo)');
      if (fullText.match(/[A-Z]{2,}/)) relevantInfo.push('Siglas ou c√≥digos em mai√∫sculas');
      if (fullText.match(/(rua|av|avenida|street|road)/i)) relevantInfo.push('Poss√≠vel informa√ß√£o de endere√ßo');
      
      if (relevantInfo.length > 0) {
        analysis += '**Informa√ß√µes relevantes detectadas:**\n';
        relevantInfo.forEach(info => analysis += `‚Ä¢ ${info}\n`);
        analysis += '\n';
      }
    }
    
    // Landmarks e pontos de refer√™ncia
    if (annotations.landmarkAnnotations && annotations.landmarkAnnotations.length > 0) {
      analysis += '## üó∫Ô∏è PONTOS DE REFER√äNCIA E LANDMARKS\n\n';
      annotations.landmarkAnnotations.forEach(landmark => {
        analysis += `‚Ä¢ **${landmark.description}**\n`;
        if (landmark.locations && landmark.locations[0]) {
          const location = landmark.locations[0].latLng;
          analysis += `  - Coordenadas: ${location.latitude.toFixed(6)}, ${location.longitude.toFixed(6)}\n`;
        }
        analysis += `  - Confian√ßa: ${(landmark.score * 100).toFixed(1)}%\n`;
      });
      analysis += '\n';
    }
    
    // An√°lise de seguran√ßa (Safe Search)
    if (annotations.safeSearchAnnotation) {
      const safeSearch = annotations.safeSearchAnnotation;
      analysis += '## üõ°Ô∏è AN√ÅLISE DE CONTE√öDO\n\n';
      analysis += `‚Ä¢ **Adequa√ß√£o para uso comercial**: ${safeSearch.adult === 'VERY_UNLIKELY' ? 'Adequada' : 'Verificar'}\n`;
      analysis += `‚Ä¢ **Conte√∫do profissional**: ${safeSearch.violence === 'VERY_UNLIKELY' ? 'Sim' : 'Verificar'}\n\n`;
    }
    
    // Resumo da an√°lise
    analysis += '## üìä RESUMO DA AN√ÅLISE T√âCNICA\n\n';
    const totalElements = annotations.labelAnnotations ? annotations.labelAnnotations.length : 0;
    const totalObjects = annotations.localizedObjectAnnotations ? annotations.localizedObjectAnnotations.length : 0;
    const hasText = annotations.textAnnotations && annotations.textAnnotations.length > 0;
    const hasLandmarks = annotations.landmarkAnnotations && annotations.landmarkAnnotations.length > 0;
    
    analysis += `‚Ä¢ **Elementos identificados**: ${totalElements}\n`;
    analysis += `‚Ä¢ **Objetos localizados**: ${totalObjects}\n`;
    analysis += `‚Ä¢ **Texto detectado**: ${hasText ? 'Sim' : 'N√£o'}\n`;
    analysis += `‚Ä¢ **Pontos de refer√™ncia**: ${hasLandmarks ? 'Sim' : 'N√£o'}\n`;
    analysis += `‚Ä¢ **Qualidade da an√°lise**: ${totalElements > 10 ? 'Alta' : totalElements > 5 ? 'M√©dia' : 'B√°sica'}\n`;
    
    return analysis;
  }

  /**
   * Converte arquivo para base64
   */
  static async fileToBase64(file) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => {
        const base64 = reader.result.split(',')[1];
        resolve(base64);
      };
      reader.onerror = reject;
      reader.readAsDataURL(file);
    });
  }

  /**
   * An√°lise de m√∫ltiplas imagens
   * @param {Array<File>} imageFiles - Array de arquivos de imagem
   * @param {string} customPrompt - Prompt personalizado
   * @param {Object} propertyInfo - Informa√ß√µes do im√≥vel
   * @returns {Promise<Object>} An√°lise consolidada
   */
  static async analyzeMultipleImages(imageFiles, customPrompt = '', propertyInfo = {}) {
    try {
      const analyses = [];
      let consolidatedLocation = null;
      let consolidatedMarket = null;
      
      // Analisa cada imagem
      for (const imageFile of imageFiles) {
        const analysis = await this.analyzeImageWithLocation(imageFile, customPrompt, propertyInfo);
        analyses.push(analysis);
        
        // Usa a primeira localiza√ß√£o v√°lida encontrada
        if (!consolidatedLocation && analysis.locationData) {
          consolidatedLocation = analysis.locationData;
          consolidatedMarket = analysis.marketAnalysis;
        }
      }
      
      // Consolida an√°lises
      const consolidatedAnalysis = this.consolidateMultipleAnalyses(analyses);
      
      return {
        success: true,
        timestamp: new Date().toISOString(),
        totalImages: imageFiles.length,
        individualAnalyses: analyses,
        consolidatedAnalysis,
        locationData: consolidatedLocation,
        marketAnalysis: consolidatedMarket
      };
    } catch (error) {
      console.error('Erro na an√°lise m√∫ltipla:', error);
      return {
        success: false,
        error: error.message,
        timestamp: new Date().toISOString()
      };
    }
  }

  /**
   * Consolida m√∫ltiplas an√°lises
   */
  static consolidateMultipleAnalyses(analyses) {
    const successful = analyses.filter(a => a.success);
    
    if (successful.length === 0) {
      return 'N√£o foi poss√≠vel analisar nenhuma imagem.';
    }
    
    let consolidated = `## AN√ÅLISE CONSOLIDADA DE ${successful.length} IMAGENS\n\n`;
    
    // Resumo geral
    consolidated += `### üìä RESUMO GERAL\n`;
    consolidated += `**Imagens analisadas com sucesso:** ${successful.length}\n`;
    consolidated += `**Imagens com geolocaliza√ß√£o:** ${successful.filter(a => a.locationData).length}\n`;
    consolidated += `**Imagens com an√°lise visual:** ${successful.filter(a => a.visualAnalysis).length}\n\n`;
    
    // An√°lises individuais resumidas
    successful.forEach((analysis, index) => {
      consolidated += `### üñºÔ∏è IMAGEM ${index + 1}\n`;
      if (analysis.visualAnalysis) {
        const preview = analysis.visualAnalysis.analysis.substring(0, 200);
        consolidated += `${preview}...\n\n`;
      }
    });
    
    return consolidated;
  }
}

export default CustomAIService;